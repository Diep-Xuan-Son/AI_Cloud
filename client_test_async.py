# Copyright (c) 2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import numpy as np
import cv2
import torch
import tritonclient.grpc as grpcclient
from sklearn import preprocessing

client = grpcclient.InferenceServerClient(url="192.168.6.137:8001")

# image_data = cv2.imread("3.jpg")

# image_data = np.expand_dims(image_data, axis=0)
# print(image_data.shape)

# input_tensors = [grpcclient.InferInput("input_image", image_data.shape, "UINT8")]
# input_tensors[0].set_data_from_numpy(image_data)
# results = client.infer(model_name="recognize_face_nodet_ensemble", inputs=input_tensors)
# output_data = results.as_numpy("feature_norm")
# print(list(output_data))


f1 = np.array([[-1.33881015e-03, -5.33251927e-02,  1.56511337e-02, -5.71907638e-05,
-1.29900917e-01,  3.83732462e-02,  4.97137909e-03, -2.12183307e-02,
-1.85755117e-03, -5.57335937e-02,  1.33860190e-02, -3.28962685e-02,
-4.26854537e-02, -1.65502155e-02, -3.00484638e-02, -9.31867477e-02,
-7.35894050e-02,  9.95764061e-03,  3.49168821e-02, -5.73235825e-02,
-1.08941843e-02,  8.55326540e-03, -7.85193318e-02,  1.41386672e-02,
-4.12136533e-02,  4.54468663e-02,  1.50258498e-02,  1.17633340e-01,
6.34088135e-02,  1.46615463e-02,  6.21806728e-02,  1.35060106e-02,
-2.97135057e-02, -8.44210267e-03,  2.22721336e-02,  6.44371876e-03,
-4.44335811e-02, -3.88597655e-03,  9.54793844e-02,  4.18948992e-03,
7.25085192e-03,  2.12404780e-03,  7.38095825e-02,  4.16526715e-02,
-4.54200932e-02, -5.76979459e-02,  2.83659147e-02,  2.21761881e-02,
4.36842471e-02,  7.86814530e-02,  4.71327405e-02,  4.78341393e-02,
-4.20952689e-02, -3.49887355e-02,  2.29366260e-02,  4.25271606e-02,
7.46037054e-02, -6.37746093e-02, -1.44758319e-03,  1.07017740e-01,
3.62835173e-02,  2.83984301e-02, -6.37747784e-02,  4.06278170e-02,
-3.77617621e-02,  7.21060352e-03,  2.73358580e-02, -5.29561814e-03,
-9.85880336e-02,  5.19429918e-03, -8.38741796e-03, -3.42965143e-02,
4.93936811e-02, -4.05214477e-03,  5.56581534e-02,  5.04601336e-02,
-4.66057046e-02,  7.46877980e-02,  5.10199264e-02,  6.24569759e-03,
1.54989910e-01,  3.68728085e-03,  5.62946957e-02,  3.98369770e-02,
-1.65969026e-03,  1.16716963e-02, -3.93639898e-02,  2.43078835e-02,
6.34960920e-02, -8.47550499e-02,  2.21080883e-02,  2.93646359e-02,
-1.57966064e-02,  1.03094270e-02, -2.21708869e-03, -7.68242886e-03,
2.34443538e-02, -5.10341642e-02,  4.33606570e-02,  7.55139612e-02,
-5.25312327e-03, -3.48216509e-02,  5.09992366e-02, -3.23875302e-03,
-2.02530583e-02, -3.82119962e-02, -8.04701628e-02,  5.74650290e-02,
9.11356944e-02,  8.38007422e-02, -5.77122881e-02,  3.59194639e-03,
6.13614715e-03, -7.63808772e-03, -6.21986244e-03,  1.81986266e-03,
-6.35700732e-02, -5.13160173e-03,  4.74747208e-03,  2.42664347e-02,
-4.40358999e-02, -5.29361439e-02,  5.47225389e-02, -5.99934775e-03,
-9.59064324e-03,  1.72885973e-02,  2.16970876e-02,  8.53520099e-02,
-3.05179090e-02,  1.87565907e-02,  5.98357244e-02,  2.08141639e-02,
1.24071443e-01,  3.41260894e-02, -5.96735263e-03, -1.49266834e-02,
-2.79224037e-02,  2.07590076e-02,  3.82859081e-02,  4.12893648e-02,
-2.08638380e-02,  1.97310903e-02, -4.04558439e-02, -2.36988630e-03,
-4.51549226e-02,  5.40717663e-03,  6.61272587e-02, -4.11033256e-02,
-5.50617212e-02,  3.86346559e-02,  8.76924056e-03, -3.63188404e-02,
-5.42272690e-02, -1.39291019e-03, -8.92282236e-02, -2.60779824e-02,
1.09137662e-02,  1.52792806e-02, -3.02433045e-02,  5.63001120e-02,
-8.46480650e-03,  2.61660996e-02, -2.34607919e-02,  3.72587742e-03,
3.17630777e-02,  6.97259804e-02,  3.79735686e-02, -3.13860460e-02,
-2.18680278e-02,  8.01066012e-03, -2.00331808e-02, -3.02095869e-02,
-4.55885069e-02,  8.09905279e-02,  2.24462051e-02, -1.46810457e-03,
-4.34002685e-02,  1.97893394e-02,  1.21003187e-02, -5.16552138e-02,
-1.99018749e-02, -7.60604566e-02, -4.54291882e-02,  1.50635843e-03,
-1.83181960e-02, -2.08126095e-02, -2.17296354e-02, -2.34571261e-03,
-6.29219023e-02, -6.51454760e-02,  4.23842058e-02, -1.24361231e-02,
8.24650094e-03,  6.25535975e-02,  4.78042200e-02,  5.84442255e-03,
-8.44229819e-04,  1.93012731e-03,  5.27537809e-02,  5.72363838e-02,
-1.41085527e-02, -1.74736041e-03,  1.38218511e-02, -3.20959649e-02,
7.19826994e-02,  4.81412667e-02, -6.04807470e-03,  1.08722795e-01,
1.02660722e-02,  7.75126230e-03,  1.99843605e-02,  3.90043073e-02,
7.34634383e-03, -1.43522672e-02,  4.71885317e-02, -1.34134379e-02,
4.21201949e-02, -6.05536708e-02, -4.71830456e-03,  5.63015306e-02,
8.79794929e-02, -2.04541939e-02,  3.73874884e-02,  2.90665268e-02,
-6.58497245e-03, -4.93609592e-02, -3.16437942e-02, -8.60849972e-04,
2.54141321e-02, -2.19071617e-02,  2.41648414e-02, -1.29840414e-02,
1.69399715e-02, -3.71922557e-03,  6.96024492e-03, -2.93282002e-02,
2.05205924e-02, -8.57148387e-03,  1.24397734e-02,  6.39256937e-02,
7.96731275e-02, -3.81883646e-02,  9.55393044e-04, -1.87914682e-02,
-3.16534719e-02, -9.68577383e-02, -4.03429151e-02,  4.55843948e-02,
-2.98886425e-02, -6.04699569e-02,  6.47760558e-03, -4.45344189e-03,
6.05996086e-03,  6.94654494e-02,  1.35952953e-02, -2.48843010e-02,
-2.04632095e-02, -5.19175869e-02,  1.97613691e-02, -3.25119188e-02,
8.45817673e-02,  4.07921237e-02,  5.40405855e-02, -3.79304876e-03,
-4.20693820e-02,  4.17015011e-03,  1.47494395e-02,  1.80760148e-02,
-6.43889384e-02,  1.20288823e-02, -6.82928459e-02,  5.99607431e-02,
7.46064782e-02, -3.77709594e-02,  5.78527491e-02,  1.24337496e-03,
-4.79139908e-03,  5.48234426e-02,  3.81440259e-03, -3.37971524e-02,
1.29565304e-02, -7.74355399e-02,  7.61634279e-05, -7.04759416e-02,
9.37545150e-02,  3.97836875e-02, -3.88852354e-02,  2.29640636e-02,
1.89179415e-02,  4.43050716e-03,  3.68199596e-02, -8.75750871e-03,
6.83519600e-03,  8.56840186e-02, -1.19665908e-02,  2.19963717e-02,
-7.41061607e-02, -9.26105417e-03,  1.56997984e-02, -5.26659562e-03,
-5.31203823e-03, -4.25438828e-02, -3.95245106e-02,  7.31637906e-02,
5.11143485e-02, -5.77638723e-02, -4.15474390e-02,  4.26788129e-03,
7.44557000e-03,  1.29567470e-02,  3.01711425e-02,  2.60238341e-02,
1.21579181e-02, -5.67291549e-03, -2.22878325e-02, -5.15600413e-03,
-1.50764287e-02,  2.00291024e-02,  6.38385847e-02,  5.69755391e-02,
-5.29881812e-02, -2.16192255e-02,  1.53835378e-01, -7.32018942e-03,
-5.39656977e-02,  4.00590691e-03,  2.66215210e-02,  1.77857302e-03,
-1.33749188e-02, -8.42340776e-02, -9.56124925e-02,  1.83895192e-02,
-1.32635245e-02,  1.33722753e-03,  4.82837037e-02,  8.95683292e-03,
3.70063472e-02, -5.49136983e-03,  6.62459048e-03,  3.13551063e-02,
2.01307107e-02, -4.60019493e-02,  4.18092393e-02, -3.87087383e-04,
2.65424841e-02,  4.32655575e-02,  2.30635138e-02,  7.38249887e-03,
-4.27300935e-02,  2.39399446e-02,  3.45719999e-02, -3.17655817e-02,
2.23309664e-02,  2.42343027e-02,  7.98426366e-02, -7.77043399e-02,
1.19328048e-02,  1.46374081e-02,  1.00587847e-02,  4.13158863e-02,
-1.53493468e-02,  3.73404789e-02, -2.01543162e-02, -6.03114546e-02,
1.39693014e-02,  2.14836607e-02,  7.91571933e-02,  2.31106925e-02,
-3.57424976e-02,  6.22511148e-02,  5.26877647e-02,  2.87991880e-02,
-3.84512278e-02,  3.56281998e-02, -6.47489695e-02, -1.15709928e-01,
-9.69068536e-02,  4.23656691e-03, -9.23646916e-02, -3.11840616e-02,
-1.84189543e-02,  4.54222748e-03, -2.33702627e-02,  1.20432880e-02,
-5.14424939e-02,  4.85250337e-02, -4.00089352e-03,  3.95499444e-02,
5.63863248e-02,  2.29781264e-03,  5.48026535e-02,  3.05322264e-02,
-6.46389854e-02, -5.94128036e-03, -3.03116084e-02, -4.26053041e-02,
-2.31916138e-02,  1.86276059e-02, -7.06445148e-02, -4.08502894e-02,
1.93883251e-02,  8.24156176e-02,  1.61548465e-02,  3.91078671e-02,
-2.10493893e-02,  4.71737564e-02, -1.57505403e-02,  3.68040466e-02,
3.38054636e-02, -6.32130922e-04,  3.38889436e-02,  2.15868670e-02,
-8.88055204e-03,  4.18029468e-02, -1.39187014e-02,  1.41956606e-02,
-4.19572873e-02,  5.63294734e-02, -5.62485424e-02,  5.79687517e-02,
6.71551350e-02,  9.11628333e-03,  5.15396897e-03,  2.63136172e-02,
-4.18755942e-02,  1.25623861e-02,  8.28711062e-02,  2.31108742e-03,
4.96490843e-02, -2.48919609e-03, -5.09322248e-02,  2.54326686e-02,
-1.13093928e-02,  8.64996728e-02,  7.81747782e-03,  7.35371585e-02,
3.49760011e-02, -4.10181057e-02,  7.47389120e-03,  1.35772741e-02,
6.93088142e-02,  6.33383415e-02,  6.68631379e-03,  1.05805181e-02,
6.73839845e-02,  2.00507303e-02,  7.97073878e-02,  3.42488128e-02,
1.58649946e-03, -9.40784368e-03,  3.28449827e-02, -5.09097314e-03,
4.61697308e-02,  5.14021800e-02, -6.10713674e-02, -2.87258785e-02,
-2.59364312e-02,  4.00892864e-02, -1.84393103e-02, -1.69915211e-02,
-4.99344620e-02,  2.09666461e-02, -4.04538999e-02, -8.26290495e-02,
-7.01760726e-03,  4.92373199e-02,  4.80194393e-03, -3.04572716e-02,
-1.02204765e-02, -4.54880559e-02,  2.80677458e-02,  6.62507486e-02,
1.80593166e-02,  3.43753173e-02,  5.34838992e-02, -5.36145577e-02,
2.03521650e-02, -4.65602810e-03,  2.84193611e-02,  5.49131755e-02,
1.75363007e-02, -2.85838246e-02, -9.41888565e-02,  4.36123264e-02,
-8.82507071e-02, -5.12027817e-02, -3.95411335e-03,  4.67119951e-02,
1.97487344e-02,  2.64386854e-02,  4.53932308e-02,  1.28904583e-01,
-6.22370315e-02, -4.36805956e-03, -2.31885770e-02,  5.58303406e-02,
5.38981530e-02,  9.65627319e-03,  8.41802229e-02,  3.15925159e-02,
8.17129744e-02,  2.74719281e-02,  1.90651330e-02, -6.30148432e-03,
2.71922982e-02, -2.70575423e-02,  5.23079800e-02,  7.84807455e-02,
2.21729174e-02, -8.04175793e-03, -2.94205440e-02,  1.53872523e-02]])


f2 = np.array([[[-6.76623941e-03, -9.35482923e-02,  3.22734926e-02, -1.83923261e-03,
-5.62597505e-02,  4.25924583e-02,  4.00039799e-02, -4.46346386e-02,
4.12204481e-02, -5.91237464e-02,  8.13528772e-03, -1.08710079e-02,
-4.57247859e-02, -6.58183156e-03, -3.33974123e-03, -6.75192092e-02,
-2.77351737e-02, -3.70520241e-02, -8.44539098e-02, -9.51045073e-02,
-3.55321382e-02,  5.71072099e-02, -2.84490691e-02,  4.27587346e-02,
-1.04992130e-02,  4.21478501e-02,  5.10255253e-02, -1.68468170e-02,
3.80995483e-02, -1.54886878e-02,  5.22335790e-02,  3.17983999e-03,
-2.71109506e-02, -2.75766531e-02,  6.81792841e-02,  3.88029598e-03,
-1.98494364e-02,  8.89932793e-02,  7.42562666e-02, -5.96995363e-02,
-9.34150515e-03,  2.21298797e-02,  4.64476829e-02,  3.07758953e-02,
-4.02546706e-02, -8.65748008e-02,  4.00439065e-02,  2.02555585e-02,
-7.86196309e-03,  2.53065455e-02, -3.83101541e-02, -8.88136902e-03,
1.66811638e-02,  4.11053383e-03, -3.93070420e-03,  4.20779024e-02,
7.57693146e-02, -2.67066373e-02, -3.32867422e-02,  1.81274673e-02,
2.37018682e-02,  5.34587928e-03, -2.16881349e-02,  4.33419146e-02,
-4.85423666e-03,  6.64265902e-02,  2.24783206e-02, -5.52174813e-02,
2.62992994e-02,  8.81536704e-02,  1.52045254e-02,  2.28384640e-02,
-1.31287468e-02, -1.21027026e-02,  1.11780862e-03,  1.65572026e-02,
-2.90498612e-02, -3.83865885e-02,  5.54809956e-02, -3.40169338e-03,
1.17675686e-02,  4.45148762e-02,  3.66605630e-02,  4.60575888e-02,
-4.81103911e-02, -6.69404510e-04, -5.42686082e-02,  2.27797556e-02,
8.21951783e-02, -4.66358686e-03,  9.53212345e-02,  3.22205066e-02,
4.51148568e-02, -2.99747365e-02,  8.84519884e-02,  3.53341169e-02,
5.44475493e-02, -2.35186445e-02,  3.53954054e-02,  8.01069849e-02,
-3.09714733e-02,  8.06829935e-02,  3.38479358e-02,  7.40198034e-02,
-5.18792932e-02,  4.40705960e-02, -6.84576710e-02, -2.34955056e-02,
6.02776684e-02, -4.65931096e-02, -5.58802840e-02, -5.90457579e-02,
-3.79618888e-02,  7.87295271e-02, -4.80386821e-02,  3.82756753e-02,
-1.01349126e-02,  1.55710950e-02, -8.79930144e-03, -9.78437237e-03,
1.05725724e-02,  3.84686000e-02,  4.02681013e-02,  2.35464757e-02,
4.44778044e-02,  1.99318688e-03, -3.05157654e-02,  6.03663449e-02,
3.43035401e-02,  1.28455226e-02,  4.09159109e-02,  5.23263937e-02,
1.13826746e-02,  9.27917927e-03, -6.89916492e-03,  2.26821924e-02,
3.20765354e-03,  9.46456599e-02,  4.08230444e-02,  4.95411801e-02,
-1.02136798e-01,  2.10112754e-02, -4.15149475e-02, -2.08175334e-02,
-6.09061666e-03,  2.62034889e-02,  2.93963710e-02, -4.39424103e-02,
-3.20604881e-03,  9.15867291e-03,  6.20204399e-02,  2.90849358e-02,
-3.40713767e-02,  2.90915806e-02, -1.48851460e-02, -3.19910648e-03,
4.57993669e-02,  4.31688007e-02, -5.66786832e-02, -3.26221766e-04,
-2.53998955e-02,  1.40489615e-02, -5.29401073e-02, -8.08179305e-03,
4.55010601e-02, -1.51034169e-02,  6.22025816e-02,  2.45899710e-02,
4.41660727e-02,  7.49170492e-03, -2.31613961e-02, -2.96720698e-02,
-5.98563703e-02,  2.39478609e-02, -5.01570847e-03,  3.61758685e-03,
3.65168602e-02, -8.22985285e-03, -1.92123179e-02, -6.40442683e-03,
-1.20951138e-02, -5.00938442e-02, -2.42579479e-02,  3.64990466e-02,
1.30695131e-02, -2.92160080e-02,  3.70499262e-02,  2.43092303e-02,
-8.90777254e-02, -2.37225595e-02,  1.95878403e-02, -5.37803076e-03,
2.04025765e-02,  2.83801660e-02,  2.54291483e-02,  6.75703909e-03,
1.01375701e-01,  4.07071087e-03,  7.67119029e-02, -1.15194341e-02,
-3.85851393e-03,  1.91967663e-02, -7.86542148e-02, -6.20448553e-02,
6.66380219e-02, -6.90396650e-02, -1.05981474e-02,  4.46430936e-02,
-1.88540724e-02, -1.80994562e-02,  6.48910431e-02,  1.10242495e-01,
-3.51233183e-02, -5.67380119e-02,  4.38976087e-02,  1.01435395e-03,
5.57235364e-02,  3.86094969e-02, -2.80749093e-02,  7.25402299e-02,
1.03495936e-01, -6.30963907e-02,  1.05146333e-03,  3.07610472e-03,
3.05412123e-03,  7.75990274e-03, -5.26976872e-02,  2.04063911e-02,
2.40712220e-02, -3.90925958e-02, -4.13316347e-02,  5.59698470e-02,
-2.20175406e-02, -1.48083045e-02, -3.60027589e-02, -1.63802943e-02,
9.76168251e-02,  4.34908838e-02, -1.56387772e-03,  6.68873945e-02,
6.97477471e-02,  3.80090099e-02, -3.72766650e-02, -6.14879681e-04,
-1.43803673e-02, -7.29684921e-02, -8.41111961e-04, -1.59823769e-02,
-4.87762216e-02, -4.36994234e-02,  3.53540025e-02, -3.48534297e-02,
3.12285412e-02,  6.43141021e-02, -3.55027559e-02,  4.64641785e-02,
-4.16672607e-02, -3.56061926e-02, -9.08559394e-02,  3.97303388e-02,
-2.81672809e-03,  2.01487908e-02, -1.18336565e-02, -4.45316423e-02,
-8.28694406e-02,  4.90993519e-02,  3.29493923e-02, -2.38168088e-02,
3.13571787e-02, -3.25864474e-02, -5.78651242e-02,  3.77236359e-02,
-1.13669389e-02, -2.00956019e-02,  2.60401796e-02, -5.47781873e-03,
7.24443300e-03,  4.05085442e-02, -1.67106540e-02,  5.61828097e-02,
5.98456620e-03, -1.55044064e-02, -3.45849211e-03, -5.33607144e-02,
1.06609115e-01,  4.70960537e-03, -5.56321314e-02, -7.30214148e-02,
-6.51725205e-02, -9.01879358e-05,  3.72901274e-02, -4.98311184e-02,
4.36544341e-03, -1.41631108e-02,  9.27840812e-02,  4.15695768e-02,
3.03908085e-02,  5.06684483e-02,  6.72367305e-02,  2.48368666e-03,
-2.62117309e-03,  1.93265680e-02, -4.75466391e-02,  1.63222218e-02,
2.78940052e-02,  1.62070552e-02, -1.22610634e-02,  8.56611519e-02,
3.22472356e-03,  6.07486832e-02, -1.03626896e-02, -2.18863198e-03,
-3.76402402e-02,  4.45501695e-02, -2.94264757e-02, -4.53097671e-02,
2.73505417e-02, -7.04871468e-03,  7.02912942e-02,  1.39412053e-02,
-5.58370137e-02, -1.03412065e-01,  5.02242142e-02,  7.49365462e-03,
-3.20672984e-02, -1.49449452e-02, -3.42023481e-02,  5.25610434e-02,
-1.72173421e-02, -8.13968211e-03, -1.17658845e-01,  3.20986347e-02,
1.32714209e-02,  1.61261675e-02, -3.60093433e-02,  4.85972341e-02,
-3.30844474e-02, -2.78201724e-02, -1.71465972e-02,  5.22510240e-02,
1.96918051e-02, -1.70326350e-02,  1.20077626e-02, -4.77782788e-02,
-8.51429405e-04,  6.94495266e-02,  5.46625325e-03,  4.61113231e-02,
-1.04504027e-02,  6.14522002e-03,  4.17670944e-02, -4.33162965e-03,
1.85845134e-02, -2.27103359e-02, -1.15436997e-03, -1.73838673e-02,
-2.27700933e-02,  3.30860532e-02,  1.51848787e-02,  2.03844623e-02,
-4.70102896e-02,  7.65710635e-02, -4.48780946e-02, -3.07710087e-02,
5.70235928e-02,  6.09611167e-02,  5.37224133e-02,  1.81350888e-03,
-7.05712521e-02,  4.97670494e-03, -6.36541079e-02,  4.39354949e-02,
-1.97946554e-03, -7.13376383e-02,  1.57425786e-02, -7.08119684e-02,
-4.15287552e-02, -1.94650519e-02, -4.63871945e-02,  2.32615378e-02,
1.14590082e-02,  3.75851016e-02, -5.73817980e-02, -2.01937635e-02,
-1.65434301e-04,  2.68571807e-02,  6.75834921e-03, -4.86477737e-02,
4.90589649e-02,  1.15627277e-02,  3.32633515e-02,  8.44848346e-02,
-2.05130552e-02, -5.22638075e-02,  7.34329802e-02,  1.77382149e-02,
2.74792167e-02,  3.97154577e-02,  2.65579210e-03,  2.28765920e-02,
3.32058991e-02,  6.22995920e-02,  6.75331206e-02, -8.97096855e-03,
-5.97624562e-02,  1.14781036e-01, -4.64302550e-02,  2.84023135e-02,
1.12327609e-01,  4.73826392e-02,  8.62364498e-03,  3.03101841e-02,
2.20543188e-02, -2.68141144e-02, -3.24234604e-02,  1.11084802e-02,
-1.04024392e-01,  5.42008877e-02, -4.01854711e-02,  9.24050869e-02,
4.72345160e-02,  3.75783705e-02,  3.07359629e-02, -2.96261459e-02,
-3.56413996e-02,  5.36737326e-02,  4.35787372e-03,  5.25015940e-02,
-7.67734245e-02,  1.96275036e-02, -2.85919460e-02,  5.39573165e-02,
3.12144832e-02,  6.24876101e-02,  4.90660618e-02,  3.88431712e-02,
3.33040032e-02, -4.20566469e-02,  5.28316430e-02, -1.16868648e-01,
3.50228428e-02,  5.21750734e-02,  5.98486728e-03,  7.43042622e-02,
4.73788319e-02,  1.07110736e-02, -1.58601338e-02, -3.53959292e-02,
-2.65095427e-02,  5.06441309e-02,  3.61581542e-02,  2.83113147e-02,
2.47422036e-02,  4.71586170e-02, -4.91157845e-02, -5.94155608e-02,
-2.10395383e-02,  3.90709173e-02,  2.87211274e-02, -5.40308675e-02,
-5.05659985e-02,  6.60540420e-02, -2.55456790e-02,  3.58121681e-02,
7.54533555e-02,  1.99009332e-02,  2.01477774e-03,  1.66162478e-02,
-3.33584368e-02, -1.05093177e-02, -2.74820082e-02,  8.53976347e-04,
8.45329514e-03,  8.41377611e-02,  8.75748416e-03, -8.90826868e-02,
1.99417562e-02, -2.66966801e-02, -1.27270336e-02, -1.40488982e-02,
-4.64572344e-02,  7.06256310e-02, -1.05230914e-01, -1.26076251e-02,
1.74370677e-02, -8.30945248e-02,  2.38486099e-02, -4.04753718e-02,
6.54918225e-03,  6.60992923e-02,  2.18005820e-02,  9.96455690e-02,
-5.36356134e-02,  8.00089741e-03, -2.33213312e-02,  7.18279851e-03,
1.82354595e-02,  5.96377559e-02, -4.09521208e-03,  3.09376045e-02,
-2.38336439e-02,  2.80997102e-02,  7.60629019e-02, -1.26930928e-02,
-4.34235736e-03, -1.37246164e-02, -5.19326823e-02,  1.20415392e-02,
2.57552546e-03, -7.26659553e-02, -4.67482287e-02, -4.08223882e-02]]])

# print(f1.shape)
# f1 = preprocessing.normalize(f1).flatten().reshape(1,-1)
# f2 = preprocessing.normalize(f2).flatten().reshape(1,-1)
# print(list(f2))
# exit()
# dist = np.linalg.norm(f1 - f2, axis=1)
# print(dist)
# similarity = (np.tanh((1.23132175 - dist) * 6.602259425) + 1) / 2
# # similarity_sort_idx = similarity.argsort()[::-1]
# print(similarity)
f1 = f1.astype(np.float32)
f2 = f2.astype(np.float32)

# input_tensors = [grpcclient.InferInput("compare_face_feature1", f1.shape, "FP32"), grpcclient.InferInput("compare_face_feature2", f2.shape, "FP32")]
# input_tensors[0].set_data_from_numpy(f1)
# input_tensors[1].set_data_from_numpy(f2)
# # results = client.infer(model_name="compare_face", inputs=input_tensors)
# # output_data = results.as_numpy("similarity_sort_idx")
# # print(list(output_data))
# output1 = grpcclient.InferRequestedOutput("similarity")
# output2 = grpcclient.InferRequestedOutput("similarity_sort_idx")

import argparse
import sys
import time
from functools import partial

import numpy as np
import tritonclient.grpc as grpcclient
from tritonclient.utils import InferenceServerException

triton_client = grpcclient.InferenceServerClient(url="192.168.6.137:8001")
model_name = "compare_face"
# Infer
inputs = []
outputs = []
inputs.append(grpcclient.InferInput("compare_face_feature1", f1.shape, "FP32"))
inputs.append(grpcclient.InferInput("compare_face_feature2", f2.shape, "FP32"))

 # Initialize the data
inputs[0].set_data_from_numpy(f1)
inputs[1].set_data_from_numpy(f2)

outputs.append(grpcclient.InferRequestedOutput("similarity"))
outputs.append(grpcclient.InferRequestedOutput("similarity_sort_idx"))

def callback(user_data, result, error):
	if error:
		user_data.append(error)
	else:
		user_data.append(result)

# list to hold the results of inference.
user_data = []

for i in range(10):
	# Inference call
	triton_client.async_infer(
		model_name=model_name,
		inputs=inputs,
		callback=partial(callback, user_data),
		outputs=outputs,
		client_timeout=10,
	)

print(len(user_data))
# Wait until the results are available in user_data
time_out = 10
while (len(user_data) == 0) and time_out > 0:
	time_out = time_out - 1
	time.sleep(0.0025)
	print(len(user_data))

 # Display and validate the available results
if len(user_data) >= 1:
	print(user_data)
	# Check for the errors
	if type(user_data[0]) == InferenceServerException:
		print(user_data[0])
		sys.exit(1)

	# Validate the values by matching with already computed expected
	# values.
	output0_data = user_data[0].as_numpy("similarity")
	output1_data = user_data[0].as_numpy("similarity_sort_idx")

	print(output0_data)
	print("PASS: Async infer")